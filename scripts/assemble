#!/bin/sh
# Global S2I variable setup
set -eo pipefail

if [ "${SCRIPT_DEBUG}" = "true" ] ; then
    set -x
    echo "Script debugging is enabled, allowing bash commands and their arguments to be printed as they are executed"
fi

SCRIPT_DIR="/usr/local/s2i"
source "${SCRIPT_DIR}/s2i-setup"
source "${SCRIPT_DIR}/common.sh"

: ${JAVA_APP_JAR:=java-app.jar}
export JAVA_APP_JAR

# Gradle arguments setting up the environment
GRADLE_CACHE="${HOME}/.gradle"

# =========================================================================
# Helper functions:

function check_error() {
  local label=$1
  local error=$2
  if [ ${error} -ne 0 ]; then
    echo "Aborting due to error code $error for $label"
    exit ${error}
  fi
}

function get_output_dir() {
  local dir=""

  if [ x"${ARTIFACT_DIR}" = x ]; then
    dir="${S2I_SOURCE_DIR}/build/libs"
  else
    if [ "${ARTIFACT_DIR:0:1}" = "/" ]; then
       echo "ARTIFACT_DIR \"${ARTIFACT_DIR}\" must not be absolute but relative to the source directory"
       exit 1
    fi
    dir="${S2I_SOURCE_DIR}/${ARTIFACT_DIR}"
  fi

  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  
  # Create the build structure
  mkdir -p $(dirname "${dir}")
  
  # The parent must exist but build/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify an existing build directory ARTIFACT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function copy_dir() {
  local src=$1
  local dest=$2
  
  # Copy recursively and preserve ownership: -a
  cp -a ${src}/* ${dest}
}

function copy_artifacts() {
    local dir=$1
    local dest=$2

    cd ${dir}

    local cp_args=${ARTIFACT_COPY_ARGS}
    if [ x"${cp_args}" = x ]; then
      cp_args="*.jar"
    fi
    echo "Running: cp ${cp_args} ${dest}"
    cp ${cp_args} ${dest}
}

function runnable_actifact_file() {
  local dir=$1

  if [ x"${APP_FILE_NAME}" = x ]; then 
      local number_of_jar_file=$(find $dir -type f -name "*.jar" | wc -l)
      if [ number_of_jar_file = 1 ]; then
        echo $(find $dir -type f -name "*.jar")
      else 
        echo $(find $dir -type f -name "${APP_BUILD_ARTIFACT}-${APP_BUILD_VERSION}.jar")
      fi
  else
    echo $(find $dir -type f -name "${APP_FILE_NAME}")
  fi
}
function rename_runnable_artifact_as() {
    local dir=$1
    local file=$2
    local source=$(runnable_actifact_file $dir)
    echo "Runnable actifact file is ${source}"

    local target_artifact_file="${dir}/${file}"
    echo "Rename actifact ${source} to ${target_artifact_file}"

    if [ ! -f ${target_artifact_file} ]; then
      echo "Running: mv ${source} ${target_artifact_file}"
      mv ${source} ${target_artifact_file}
    fi
    echo "Artifact already exist ${target_artifact_file}"
}

function clean_directory() {
    local dir=$1

    echo "Cleaning directory ${dir} ..."
    rm -Rf ${dir}/*
}

function build_gradle() {
  # Where artifacts are created during build
  local build_dir=$1

  # Where to put the artifacts
  local app_dir=$2

  # Gradle home directory
  local gradle_home=$(dirname $(dirname $(readlink -f $(which gradle))))
  echo "Gradle path is ${gradle_home}"

  local jvm_option_file=/opt/run-java/java-default-options
  if [ -z "${GRADLE_OPTS}" -a -x "$jvm_option_file" ] ; then
    export GRADLE_OPTS="$($jvm_option_file)"
    echo "Setting GRADLE_OPTS to ${GRADLE_OPTS}"
  fi

  echo "Setting GRADLE_ARGS to ${GRADLE_ARGS}"
  # Default args: no tests, if a module is specified, only assemble this module
  local gradle_args=${GRADLE_ARGS:-assemble}

  echo "Found build.gradle ... "
  local gradle_cmd="${gradle_args} -Djava.net.preferIPv4Stack=true ${GRADLE_ARGS_APPEND}"

  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  check_error "changing directory to ${S2I_SOURCE_DIR}" $?

  local gradle_exe=gradle

  if [ -f "${S2I_SOURCE_DIR}/gradlew" ] && [[ ${GRADLEW} == "true" ]]; then
    # =========
    # Use Gradle Wrapper
    echo "Gradle warrapper is detected."

    # Gradle init script file
    local init_gradle="${gradle_home}/init.d/init.gradle"

    if [[ -f  ${init_gradle} ]]; then
      echo "Init gradle file is ${init_gradle}'"
      gradle_exe="./gradlew --init-script ${init_gradle} ${gradle_cmd}"
    else
      gradle_exe="./gradlew"
    fi    
  fi
  # =========
  # Run Gradle
  echo "Running '${gradle_exe} ${gradle_cmd}'"
  echo "Gradle using ..."
  
  ${gradle_exe} --version
  ${gradle_exe} ${gradle_cmd}
  check_error "Gradle build" $?  

  echo "S2I Gradle artifact directory"
  ls -la $build_dir

  # ==============
  # Copy artifacts
  echo "Copying Gradle artifacts from ${build_dir} to ${app_dir} ..."
  copy_artifacts ${build_dir} ${app_dir}
  check_error "copying artifacts from ${build_dir} to ${app_dir}" $?
  
  echo "Clean build directory"
  clean_directory "${S2I_SOURCE_DIR}/build"


  cd ${old_dir}
}

function restore_artifacts() {
  echo "Check Cached S2I Artifacts"

  # ==============
  # Restore build artifacts
  if [ -d  ${S2I_ARTIFACTS_DIR} ]; then
      echo "Restoring files $(ls ${S2I_ARTIFACTS_DIR}/)"
      if [[ -d "${S2I_ARTIFACTS_DIR}/.m2/repository/" ]]; then
        echo "Restoring maven repositories ..."
        mv ${S2I_ARTIFACTS_DIR}/.m2/repository $HOME/.m2
      fi
      if [[ -d "${S2I_ARTIFACTS_DIR}/.gradle/" ]]; then
        echo "Restoring gradle from prior build ..."
        mv ${S2I_ARTIFACTS_DIR}/.gradle/ $HOME/.gradle/
      fi
      if [[ -d "${S2I_ARTIFACTS_DIR}/.ivy2/" ]]; then
        echo "Restoring ivy repositories ..."
        mv ${S2I_ARTIFACTS_DIR}/.ivy2/ $HOME/.ivy2/
      fi
  fi
}

# =========================================================================
# Main

echo "=================================================================="
echo "Starting S2I Java Build ....."
build_dir=$(get_output_dir)
check_error "Cannot get output dir: $build_dir" $?

restore_artifacts
if [ -f "${S2I_SOURCE_DIR}/build.gradle" ]; then
  echo "Gradle build detected"
  # If a buid.gradle is present use gradle
  echo "Artifact directory is ${build_dir}"
  echo "Deployment directory is ${DEPLOYMENTS_DIR}"
  
  clean_directory ${DEPLOYMENTS_DIR}
  build_gradle ${build_dir} ${DEPLOYMENTS_DIR}
  rename_runnable_artifact_as ${DEPLOYMENTS_DIR} ${JAVA_APP_JAR}
elif [ -f "${S2I_SOURCE_DIR}/Dockerfile" ]; then
  # This is a S2I binary build coming from fabric8-maven-plugin
  echo "S2I binary build from fabric8-maven-plugin detected"
  if [ -d "${S2I_SOURCE_DIR}/maven" ]; then
    binary_dir="${S2I_SOURCE_DIR}/maven"
  elif [ -d "${S2I_SOURCE_DIR}/deployments" ]; then
    binary_dir="${S2I_SOURCE_DIR}/deployments"
  elif [ $(find "${S2I_SOURCE_DIR}" -maxdepth 1 -type d | grep -v -e "^${S2I_SOURCE_DIR}$" | wc -l) == 1 ]; then
    # Found a single directory, take this
    binary_dir=$(find "${S2I_SOURCE_DIR}" -maxdepth 1 -type d | grep -v -e "^${S2I_SOURCE_DIR}$")
  else
    check_error "No single directory found in ${S2I_SOURCE_DIR} but:\n $(ls -l ${S2I_SOURCE_DIR})" 1
  fi
  echo "Copying binaries from ${binary_dir} to ${DEPLOYMENTS_DIR} ..."
  copy_dir ${binary_dir} ${DEPLOYMENTS_DIR}
  check_error "copying ${binary_dir} to ${DEPLOYMENTS_DIR}" $?  
else
  echo "S2I source build with plain binaries detected"
  if [ -d "${S2I_SOURCE_DIR}/deployments" ]; then
    default_binary_dir="${S2I_SOURCE_DIR}/deployments"
  else
    default_binary_dir="${S2I_SOURCE_DIR}"
  fi
  binary_dir="${ARTIFACT_DIR:-${default_binary_dir}}"
  # Assuming that the source already contains compiled artefacts
  echo "Copying binaries from ${binary_dir} to ${DEPLOYMENTS_DIR} ..."
  copy_dir ${binary_dir} ${DEPLOYMENTS_DIR}
  check_error "copying ${binary_dir} to ${DEPLOYMENTS_DIR}" $?
fi

# Remove java tmp perf data dir owned by 185
rm -rf /tmp/hsperfdata_jboss

echo "... done"
